#!/bin/bash

load etc ami
load etc init # SVN_
load lib svn

function svn_get() {
	local d="$AMI_SVND"
	for r in $SVN_REPOS; do
		[ -d "$d/$r/.svn" ] && {
			echo "# $AMI_PROG svn get $r/$1";
			cd "$d/$r" && svn update $1 ;
		}
	done
}

function svn_gets() {
	[ -z "$1" ] && svn_usage && return
	for p in $*; do
		svn_get $p
	done
}

# svn_get_logs() echos relative log file path and re-prints log for $1 pkg
# on stderr (TOFIX); optional $2 parameter orders and limits number of
# revisions re-printed (0 no limit, negative starting from first rev -
# opposite to svn default order, positive unchanged) defaults to 5 (see
# prnsomerevs)
function svn_get_logs() {
	[ -z "$1" ] && svn_usage && return
	local pkg="$1"
	local log_file
	# investigate this
	for n in rdata didx index iidx; do
		type -t $n;
	done
	# used to cd here...
	local repos=$(svn_exists $pkg)
	[ -z "$repos" ] && {
		repos="$SVN_REPOS";
	}
	for r in $repos; do
		log_file=$(svn_log $r $pkg)
		[ -s "$log_file" ] && {
			# but what convention if we choose to $(use) it $pkg-$repo-log (see lib/svn:svn_log)
			echo "$log_file";
			# TODO here we could use autolimiting on the svn_proc_log since ~10 is a screenful already and on svn_import we can turn off limiting.
			cat "$log_file" | svn_proc_log | svn_collect_log prnsomerevs $2 >&2;
			true # awkward
		} || {
			echo "# $r/$1 log_file($log_file) empty (hmmmm)" >&2;
		}
	done
}

function svn_gen_fi() {
	[ -z "$1" ] && svn_usage && return
	local pkg=$1
	local log_file
	local -a log_filez
	local fi_file
	# cd $AMI_CWD # $AMI_TEMP/imps...
	for repo in $SVN_REPOS; do
		log_file=$(svn_log $repo $pkg)
		[ -z "$log_file" ] && continue
		log_filez+=${log_file}
		echo "# svn_gen_fi() repo($repo) pkg($pkg)" >&2;
		fi_file=$(cat $log_file | svn_proc_log | svn_collect_log fast-import $repo $pkg)
		# && cd $AMI_GITD && cat /home/ypb/src/AMI/ami/tmp/tix/fast-imps | git fast-import --date-format=rfc2822 # anywayz
	done
	# if there are more than one log file we should invent something better
	# than WARNING, lazy mofo, since fi_file will contain only the LAST one, kabloom!
	[ ${#log_filez[*]} -gt 1 ] && echo "# svn_gen_fi() WARNING: ${log_filez[*]}" >&2;
	echo $fi_file;
}

function svn_usage() {
	echo "# '$AMI_PROG svn get <pkg>' is default"
	echo "Usage: $AMI_PROG svn [get|log|import] <pkg>"
}

# main()
case $1 in
	-h)
			svn_usage ;;
	get)
			shift
			svn_gets $* ;;
	log)
			shift
			# trash da place
			cd $AMI_TEMP/imports/svn || die 1 "# no $AMI_TEMP/imports/svn found"
			# TODO... be more sophisticated i.e. KNOW current rev and react!?!
			svn_get_logs $* ;;
	import)
			shift
			cd $AMI_TEMP/imports/svn || die 1 "# no $AMI_TEMP/imports/svn found"
			# OMG!
			echo $(pwd)/$(svn_gen_fi $*) ;;
	*)
			# damn duplicity... olmoust...
			svn_gets $* ;;
esac
