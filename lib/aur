# -*- mode: sh; eval: (sh-set-shell "bash") -*-

# aur_dup from to
# aka move from(noversion.tar.gz) to(version-xyz-b.tar.gz) "intelligently"
# or at least informatively for the end user
function aur_dup() {
	[ $# -ge 2 ] || return;
	local from=$1
	local to=$2
	[ -r $from ] || return;
	[ -e $to ] || { mv $from $to; return; }
	local md_to=$(md5sum $to | cut -f1 -d' ')
	local md_from=$(md5sum $from | cut -f1 -d' ')
	[ "$md_to" = "$md_from" ] &&
	  { errmsg "aur_dup() $from is a duplicate of $to";
		# what about dup of a dup of a dup ?-}
		mv $from $to,dup; } ||
	  { echo "$md_from  $from";
		echo "$md_to  $to";
		errmsg "$from CONFLICTS $to";
		# because from can't then be the to version if it has different sum; FAIL
		return 1; } >&2
}

# aur_ver pkgname
# while getting move to "versioned".tar.gz if already present
function aur_ver() {
	[ -n "$1" ] || return;
	local pkg=$1
	local tempf="/tmp/aur_ver-PKGBUILD-$pkg-"$(date +%T)
	# check, too
	[ -r $pkg.tar.gz ] && {
		tar xzf $pkg.tar.gz $pkg/PKGBUILD -O > $tempf || { rm -f $tempf; return 1; }
	} || return;
	local ver=$(sed -n 's/^[[:space:]]*pkgver[[:space:]]*=[[:space:]]*//p' $tempf | \
		tr -d "\"' ")
	local rel=$(sed -n 's/^[[:space:]]*pkgrel[[:space:]]*=[[:space:]]*//p' $tempf | \
		tr -d "\"' ")
	rm -f $tempf;
	aur_dup $pkg.tar.gz $pkg-$ver-$rel.tar.gz
}

# a bit too trivial...
function aur_exists() {
	[ -n "$1" ] || return;
	local pkg=$1
	ls -rt $AMI_AURD/$pkg/*.tar.gz 2>/dev/null
}

# aur_fast_import pkg aurballs+
function aur_fast_import() {
	[ -n "$1" ] || return;
	local pkg="$1";
	shift;
	local aubollz=($*);
	debug "aur_fast_import $pkg ${aubollz[*]}.";
	local -i mark=1;
	local -i commit;
	local version;
	local logmsg;
	local tmpafile="/tmp/ami-aur-fi-$pkg-"$(date +%T);

	# "afile" to physical file... bfile (aka blob) to stdout...
	for a in ${aubollz[@]}; do
		version=$([[ "$a" =~ "$pkg-"(.*)".tar.gz" ]] && echo "${BASH_REMATCH[1]}");
		[ -z "$version" ] && return 32;
		{
			echo "progress Creating $version commit";
			echo "commit refs/heads/p/${pkg}/aur";
			echo "mark :$mark";
			commit=$mark;
			mark+=1;
		# we could use the mdate of PKGBUILD file, perhaps laterz
			echo "committer ami.sh <$USER AT $HOSTNAME> "$(stat -c %y "$a");
		# and overall we can get cute with parsing out maintainer... blah, blah
			logmsg="AUR $pkg $version";
			echo "data "$(echo -n "$logmsg" | wc -c);
			echo "$logmsg";
			echo "deleteall";
		} > "$tmpafile";

		# YEAH, YEAH, YEAH assuming proper CWD
		rm -rf "$pkg";
		tar xf "$a" && echo "Extracted version $version.";
		FILES=($(find "$pkg" -type f))
		{
			for f in ${FILES[@]}; do
				echo "blob";
				echo "mark :$mark";
				echo "data "$(stat -c %s "$f");
				cat "$f";

				echo "M "$(stat -c %a "$f")" :$mark $pkg/aur/"$(basename "$f") >> "$tmpafile";

				mark+=1;
			done
			cat "$tmpafile";
			echo;
		} 1>&3
	done
	rm -rf "$pkg";
	rm -f "$tmpafile";

	# BUT here this "shape" doesn't feel right... BUTT looks great in git tag -l... YAY
	local tagname="aur@${version}#${pkg}";
	{
		echo "progress Creating lightweight tag '$tagname'";
		echo "reset refs/tags/$tagname";
		echo "from :$commit";
		echo;
	} 1>&3
}
