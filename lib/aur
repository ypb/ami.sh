# -*- mode: sh; eval: (sh-set-shell "bash") -*-

# aur_dup from to
# aka move from(noversion.tar.gz) to(version-xyz-b.tar.gz) "intelligently"
# or at least informatively for the end user
function aur_dup() {
	[ $# -ge 2 ] || return;
	local from=$1
	local to=$2
	[ -r $from ] || return;
	[ -e $to ] || { mv $from $to; return; }
	local md_to=$(md5sum $to | cut -f1 -d' ')
	local md_from=$(md5sum $from | cut -f1 -d' ')
	[ "$md_to" = "$md_from" ] &&
	  { echo "# aur_dup() $from is a duplicate of $to" >&2;
		# what about dup of a dup of a dup ?-}
		mv $from $to,dup; } ||
	  { echo "$md_from  $from";
		echo "$md_to  $to";
		echo "$from CONFLICTS $to";
		# because from can't then be the to version if it has different sum; FAIL
		return 1; } >&2
}

# aur_ver pkgname
# while getting move to "versioned".tar.gz if already present
function aur_ver() {
	[ -n "$1" ] || return;
	local pkg=$1
	local tempf="/tmp/aur_ver-PKGBUILD-$pkg-"$(date +%T)
	# check, too
	[ -r $pkg.tar.gz ] && {
		tar xzf $pkg.tar.gz $pkg/PKGBUILD -O > $tempf || { rm -f $tempf; return 1; }
	} || return;
	local ver=$(sed -n 's/^[[:space:]]*pkgver[[:space:]]*=[[:space:]]*//p' $tempf | \
		tr -d "\"' ")
	local rel=$(sed -n 's/^[[:space:]]*pkgrel[[:space:]]*=[[:space:]]*//p' $tempf | \
		tr -d "\"' ")
	rm -f $tempf;
	aur_dup $pkg.tar.gz $pkg-$ver-$rel.tar.gz
}
